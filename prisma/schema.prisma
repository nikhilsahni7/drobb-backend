// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  googleId      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  profile       Profile?
  preferences   Preference?

  // Relations
  matches       Match[]
  cart          Cart?
  orders        Order[]
  ratings       Rating[]

  @@map("users")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  name        String
  gender      Gender
  birthDate   DateTime
  bio         String?
  avatar      String?
  aesthetic   String[]
  photos      String[] @default([])

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Preference {
  id              String    @id @default(cuid())
  userId          String    @unique
  aesthetics      String[]  // preferred style tags
  clothingTypes   String[]  // preferred clothing categories

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model Match {
  id          String    @id @default(cuid())
  userId      String
  productId   String
  status      MatchStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("matches")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Decimal
  images      String[]
  aesthetic   String[]
  category    String
  size        String[]
  inStock     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  matches     Match[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model Cart {
  id          String    @id @default(cuid())
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]

  @@map("carts")
}

model CartItem {
  id          String    @id @default(cuid())
  cartId      String
  productId   String
  quantity    Int
  size        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Decimal
  paymentIntent   String?   // For payment gateway integration
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal   // Price at time of purchase
  size        String
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  otp       String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("otps")
}

model Rating {
  id          String    @id @default(cuid())
  userId      String
  rating      Int
  categories  String[]
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
}

enum MatchStatus {
  PENDING
  LIKED
  DISLIKED
  ADDED_TO_CART
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}